# Autogenerated from a Treetop grammar. Edits may be lost.


module DDL
  include Treetop::Runtime

  def root
    @root ||= :ddl
  end

  module Ddl0
    def ct
      elements[0]
    end
  end

  module Ddl1
    def ddl
      elements[0]
    end
  end

  module Ddl2
    def get
      ddl.elements.select{ |elm|
        elm.respond_to?(:ct)
      }.map{ |elm|
        elm.ct.get
      }
    end
  end

  def _nt_ddl
    start_index = index
    if node_cache[:ddl].has_key?(index)
      cached = node_cache[:ddl][index]
      if cached
        node_cache[:ddl][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    s1, i1 = [], index
    loop do
      i2 = index
      i3, s3 = index, []
      r4 = _nt_create_table
      s3 << r4
      if s3.last
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        r3.extend(Ddl0)
      else
        @index = i3
        r3 = nil
      end
      if r3
        r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
        r2 = r3
      else
        r5 = _nt_skip
        if r5
          r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
          r2 = r5
        else
          if (match_len = has_terminal?("\n", false, index))
            r6 = true
            @index += match_len
          else
            terminal_parse_failure('"\\n"')
            r6 = nil
          end
          if r6
            r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
            r2 = r6
          else
            @index = i2
            r2 = nil
          end
        end
      end
      if r2
        s1 << r2
      else
        break
      end
    end
    r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    s0 << r1
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Ddl1)
      r0.extend(Ddl2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:ddl][start_index] = r0

    r0
  end

  def _nt_skip
    start_index = index
    if node_cache[:skip].has_key?(index)
      cached = node_cache[:skip][index]
      if cached
        node_cache[:skip][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_comment
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      r2 = _nt_set_statement
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        r3 = _nt_create_schema
        if r3
          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
          r0 = r3
        else
          r4 = _nt_engine_statement
          if r4
            r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
            r0 = r4
          else
            r5 = _nt_use_statement
            if r5
              r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
              r0 = r5
            else
              @index = i0
              r0 = nil
            end
          end
        end
      end
    end

    node_cache[:skip][start_index] = r0

    r0
  end

  module CreateTable0
    def bq1
      elements[2]
    end

    def word
      elements[3]
    end

    def bq2
      elements[4]
    end

    def bq3
      elements[6]
    end

    def tname
      elements[7]
    end

    def fields
      elements[11]
    end

    def preprimary_key
      elements[17]
    end

    def uniqs
      elements[20]
    end

    def postprimary_key
      elements[24]
    end

  end

  module CreateTable1
    def get
      primary = if !preprimary_key.text_value.empty?
                  preprimary_key
                elsif !postprimary_key.text_value.empty?
                  postprimary_key
                else
                  nil
                end
      {
        tname: tname.text_value,
        fields: fields.elements.map{|elm|
          elm.get
        },
        primary_key: primary.nil? ? nil : primary.get ,
        uniq_list: uniqs.elements.map{|elm|
          elm.get
        }
      }
    end
  end

  def _nt_create_table
    start_index = index
    if node_cache[:create_table].has_key?(index)
      cached = node_cache[:create_table][index]
      if cached
        node_cache[:create_table][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_space
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      if (match_len = has_terminal?('CREATE TABLE IF NOT EXISTS ', false, index))
        r3 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('\'CREATE TABLE IF NOT EXISTS \'')
        r3 = nil
      end
      s0 << r3
      if r3
        r4 = _nt_bq
        s0 << r4
        if r4
          r5 = _nt_word
          s0 << r5
          if r5
            r6 = _nt_bq
            s0 << r6
            if r6
              if (match_len = has_terminal?('.', false, index))
                r7 = true
                @index += match_len
              else
                terminal_parse_failure('\'.\'')
                r7 = nil
              end
              s0 << r7
              if r7
                r8 = _nt_bq
                s0 << r8
                if r8
                  r9 = _nt_word
                  s0 << r9
                  if r9
                    if (match_len = has_terminal?("` (", false, index))
                      r10 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                      @index += match_len
                    else
                      terminal_parse_failure('"` ("')
                      r10 = nil
                    end
                    s0 << r10
                    if r10
                      r12 = _nt_space
                      if r12
                        r11 = r12
                      else
                        r11 = instantiate_node(SyntaxNode,input, index...index)
                      end
                      s0 << r11
                      if r11
                        if (match_len = has_terminal?("\n", false, index))
                          r13 = true
                          @index += match_len
                        else
                          terminal_parse_failure('"\\n"')
                          r13 = nil
                        end
                        s0 << r13
                        if r13
                          s14, i14 = [], index
                          loop do
                            r15 = _nt_field
                            if r15
                              s14 << r15
                            else
                              break
                            end
                          end
                          r14 = instantiate_node(SyntaxNode,input, i14...index, s14)
                          s0 << r14
                          if r14
                            s16, i16 = [], index
                            loop do
                              r17 = _nt_space
                              if r17
                                s16 << r17
                              else
                                break
                              end
                            end
                            r16 = instantiate_node(SyntaxNode,input, i16...index, s16)
                            s0 << r16
                            if r16
                              if (match_len = has_terminal?("\n", false, index))
                                r19 = true
                                @index += match_len
                              else
                                terminal_parse_failure('"\\n"')
                                r19 = nil
                              end
                              if r19
                                r18 = r19
                              else
                                r18 = instantiate_node(SyntaxNode,input, index...index)
                              end
                              s0 << r18
                              if r18
                                s20, i20 = [], index
                                loop do
                                  r21 = _nt_space
                                  if r21
                                    s20 << r21
                                  else
                                    break
                                  end
                                end
                                r20 = instantiate_node(SyntaxNode,input, i20...index, s20)
                                s0 << r20
                                if r20
                                  if (match_len = has_terminal?("\n", false, index))
                                    r23 = true
                                    @index += match_len
                                  else
                                    terminal_parse_failure('"\\n"')
                                    r23 = nil
                                  end
                                  if r23
                                    r22 = r23
                                  else
                                    r22 = instantiate_node(SyntaxNode,input, index...index)
                                  end
                                  s0 << r22
                                  if r22
                                    s24, i24 = [], index
                                    loop do
                                      r25 = _nt_space
                                      if r25
                                        s24 << r25
                                      else
                                        break
                                      end
                                    end
                                    r24 = instantiate_node(SyntaxNode,input, i24...index, s24)
                                    s0 << r24
                                    if r24
                                      r27 = _nt_primary_key
                                      if r27
                                        r26 = r27
                                      else
                                        r26 = instantiate_node(SyntaxNode,input, index...index)
                                      end
                                      s0 << r26
                                      if r26
                                        if (match_len = has_terminal?("\n", false, index))
                                          r29 = true
                                          @index += match_len
                                        else
                                          terminal_parse_failure('"\\n"')
                                          r29 = nil
                                        end
                                        if r29
                                          r28 = r29
                                        else
                                          r28 = instantiate_node(SyntaxNode,input, index...index)
                                        end
                                        s0 << r28
                                        if r28
                                          s30, i30 = [], index
                                          loop do
                                            r31 = _nt_space
                                            if r31
                                              s30 << r31
                                            else
                                              break
                                            end
                                          end
                                          r30 = instantiate_node(SyntaxNode,input, i30...index, s30)
                                          s0 << r30
                                          if r30
                                            s32, i32 = [], index
                                            loop do
                                              r33 = _nt_uniq_index
                                              if r33
                                                s32 << r33
                                              else
                                                break
                                              end
                                            end
                                            r32 = instantiate_node(SyntaxNode,input, i32...index, s32)
                                            s0 << r32
                                            if r32
                                              s34, i34 = [], index
                                              loop do
                                                r35 = _nt_space
                                                if r35
                                                  s34 << r35
                                                else
                                                  break
                                                end
                                              end
                                              r34 = instantiate_node(SyntaxNode,input, i34...index, s34)
                                              s0 << r34
                                              if r34
                                                if (match_len = has_terminal?("\n", false, index))
                                                  r37 = true
                                                  @index += match_len
                                                else
                                                  terminal_parse_failure('"\\n"')
                                                  r37 = nil
                                                end
                                                if r37
                                                  r36 = r37
                                                else
                                                  r36 = instantiate_node(SyntaxNode,input, index...index)
                                                end
                                                s0 << r36
                                                if r36
                                                  s38, i38 = [], index
                                                  loop do
                                                    r39 = _nt_space
                                                    if r39
                                                      s38 << r39
                                                    else
                                                      break
                                                    end
                                                  end
                                                  r38 = instantiate_node(SyntaxNode,input, i38...index, s38)
                                                  s0 << r38
                                                  if r38
                                                    r41 = _nt_primary_key
                                                    if r41
                                                      r40 = r41
                                                    else
                                                      r40 = instantiate_node(SyntaxNode,input, index...index)
                                                    end
                                                    s0 << r40
                                                    if r40
                                                      s42, i42 = [], index
                                                      loop do
                                                        r43 = _nt_space
                                                        if r43
                                                          s42 << r43
                                                        else
                                                          break
                                                        end
                                                      end
                                                      r42 = instantiate_node(SyntaxNode,input, i42...index, s42)
                                                      s0 << r42
                                                      if r42
                                                        if (match_len = has_terminal?("\n", false, index))
                                                          r45 = true
                                                          @index += match_len
                                                        else
                                                          terminal_parse_failure('"\\n"')
                                                          r45 = nil
                                                        end
                                                        if r45
                                                          r44 = r45
                                                        else
                                                          r44 = instantiate_node(SyntaxNode,input, index...index)
                                                        end
                                                        s0 << r44
                                                        if r44
                                                          if (match_len = has_terminal?(')', false, index))
                                                            r46 = true
                                                            @index += match_len
                                                          else
                                                            terminal_parse_failure('\')\'')
                                                            r46 = nil
                                                          end
                                                          s0 << r46
                                                          if r46
                                                            if (match_len = has_terminal?("\n", false, index))
                                                              r48 = true
                                                              @index += match_len
                                                            else
                                                              terminal_parse_failure('"\\n"')
                                                              r48 = nil
                                                            end
                                                            if r48
                                                              r47 = r48
                                                            else
                                                              r47 = instantiate_node(SyntaxNode,input, index...index)
                                                            end
                                                            s0 << r47
                                                          end
                                                        end
                                                      end
                                                    end
                                                  end
                                                end
                                              end
                                            end
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(CreateTable0)
      r0.extend(CreateTable1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:create_table][start_index] = r0

    r0
  end

  module Field0
    def word
      elements[0]
    end

  end

  module Field1
    def bq1
      elements[1]
    end

    def name
      elements[2]
    end

    def bq2
      elements[3]
    end

    def attr
      elements[5]
    end

    def not_null
      elements[7]
    end

  end

  module Field2
    def get
        {name: name.text_value, attr: attr.text_value, not_null: !not_null.empty? }
    end
  end

  def _nt_field
    start_index = index
    if node_cache[:field].has_key?(index)
      cached = node_cache[:field][index]
      if cached
        node_cache[:field][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    s1, i1 = [], index
    loop do
      r2 = _nt_space
      if r2
        s1 << r2
      else
        break
      end
    end
    r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    s0 << r1
    if r1
      r3 = _nt_bq
      s0 << r3
      if r3
        r4 = _nt_word
        s0 << r4
        if r4
          r5 = _nt_bq
          s0 << r5
          if r5
            s6, i6 = [], index
            loop do
              r7 = _nt_space
              if r7
                s6 << r7
              else
                break
              end
            end
            r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
            s0 << r6
            if r6
              i8, s8 = index, []
              r9 = _nt_word
              s8 << r9
              if r9
                if (match_len = has_terminal?('(', false, index))
                  r11 = true
                  @index += match_len
                else
                  terminal_parse_failure('\'(\'')
                  r11 = nil
                end
                if r11
                  r10 = r11
                else
                  r10 = instantiate_node(SyntaxNode,input, index...index)
                end
                s8 << r10
                if r10
                  r13 = _nt_word
                  if r13
                    r12 = r13
                  else
                    r12 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s8 << r12
                  if r12
                    if (match_len = has_terminal?(')', false, index))
                      r15 = true
                      @index += match_len
                    else
                      terminal_parse_failure('\')\'')
                      r15 = nil
                    end
                    if r15
                      r14 = r15
                    else
                      r14 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s8 << r14
                  end
                end
              end
              if s8.last
                r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
                r8.extend(Field0)
              else
                @index = i8
                r8 = nil
              end
              s0 << r8
              if r8
                s16, i16 = [], index
                loop do
                  r17 = _nt_space
                  if r17
                    s16 << r17
                  else
                    break
                  end
                end
                r16 = instantiate_node(SyntaxNode,input, i16...index, s16)
                s0 << r16
                if r16
                  if (match_len = has_terminal?('NOT NULL', false, index))
                    r19 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                    @index += match_len
                  else
                    terminal_parse_failure('\'NOT NULL\'')
                    r19 = nil
                  end
                  if r19
                    r18 = r19
                  else
                    r18 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s0 << r18
                  if r18
                    if (match_len = has_terminal?('NULL', false, index))
                      r21 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                      @index += match_len
                    else
                      terminal_parse_failure('\'NULL\'')
                      r21 = nil
                    end
                    if r21
                      r20 = r21
                    else
                      r20 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s0 << r20
                    if r20
                      s22, i22 = [], index
                      loop do
                        r23 = _nt_space
                        if r23
                          s22 << r23
                        else
                          break
                        end
                      end
                      r22 = instantiate_node(SyntaxNode,input, i22...index, s22)
                      s0 << r22
                      if r22
                        if (match_len = has_terminal?(',', false, index))
                          r25 = true
                          @index += match_len
                        else
                          terminal_parse_failure('\',\'')
                          r25 = nil
                        end
                        if r25
                          r24 = r25
                        else
                          r24 = instantiate_node(SyntaxNode,input, index...index)
                        end
                        s0 << r24
                        if r24
                          if (match_len = has_terminal?("\n", false, index))
                            r27 = true
                            @index += match_len
                          else
                            terminal_parse_failure('"\\n"')
                            r27 = nil
                          end
                          if r27
                            r26 = r27
                          else
                            r26 = instantiate_node(SyntaxNode,input, index...index)
                          end
                          s0 << r26
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Field1)
      r0.extend(Field2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:field][start_index] = r0

    r0
  end

  module PrimaryKey0
    def names
      elements[4]
    end

  end

  module PrimaryKey1
    def get
      names.elements.map{|name|
        name.get
      }
    end
  end

  def _nt_primary_key
    start_index = index
    if node_cache[:primary_key].has_key?(index)
      cached = node_cache[:primary_key][index]
      if cached
        node_cache[:primary_key][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    s1, i1 = [], index
    loop do
      r2 = _nt_space
      if r2
        s1 << r2
      else
        break
      end
    end
    r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    s0 << r1
    if r1
      if (match_len = has_terminal?('PRIMARY KEY', false, index))
        r3 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('\'PRIMARY KEY\'')
        r3 = nil
      end
      s0 << r3
      if r3
        s4, i4 = [], index
        loop do
          r5 = _nt_space
          if r5
            s4 << r5
          else
            break
          end
        end
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        s0 << r4
        if r4
          if (match_len = has_terminal?('(', false, index))
            r6 = true
            @index += match_len
          else
            terminal_parse_failure('\'(\'')
            r6 = nil
          end
          s0 << r6
          if r6
            s7, i7 = [], index
            loop do
              r8 = _nt_name
              if r8
                s7 << r8
              else
                break
              end
            end
            r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
            s0 << r7
            if r7
              if (match_len = has_terminal?(')', false, index))
                r9 = true
                @index += match_len
              else
                terminal_parse_failure('\')\'')
                r9 = nil
              end
              s0 << r9
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(PrimaryKey0)
      r0.extend(PrimaryKey1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:primary_key][start_index] = r0

    r0
  end

  module Name0
    def bq1
      elements[0]
    end

    def name
      elements[1]
    end

    def bq2
      elements[2]
    end

  end

  module Name1
    def get
      name.text_value
    end
  end

  def _nt_name
    start_index = index
    if node_cache[:name].has_key?(index)
      cached = node_cache[:name][index]
      if cached
        node_cache[:name][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_bq
    s0 << r1
    if r1
      r2 = _nt_word
      s0 << r2
      if r2
        r3 = _nt_bq
        s0 << r3
        if r3
          s4, i4 = [], index
          loop do
            r5 = _nt_space
            if r5
              s4 << r5
            else
              break
            end
          end
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          s0 << r4
          if r4
            if (match_len = has_terminal?(',', false, index))
              r7 = true
              @index += match_len
            else
              terminal_parse_failure('\',\'')
              r7 = nil
            end
            if r7
              r6 = r7
            else
              r6 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r6
            if r6
              s8, i8 = [], index
              loop do
                r9 = _nt_space
                if r9
                  s8 << r9
                else
                  break
                end
              end
              r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
              s0 << r8
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Name0)
      r0.extend(Name1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:name][start_index] = r0

    r0
  end

  module UniqIndex0
    def bq1
      elements[3]
    end

    def uniq_index
      elements[4]
    end

    def bq2
      elements[5]
    end

    def bq3
      elements[8]
    end

    def uniq_field
      elements[9]
    end

    def bq4
      elements[10]
    end

  end

  module UniqIndex1
    def get
      {uniq_index: uniq_index.text_value, uniq_field: uniq_field.text_value}
    end
  end

  def _nt_uniq_index
    start_index = index
    if node_cache[:uniq_index].has_key?(index)
      cached = node_cache[:uniq_index][index]
      if cached
        node_cache[:uniq_index][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    s1, i1 = [], index
    loop do
      r2 = _nt_space
      if r2
        s1 << r2
      else
        break
      end
    end
    r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    s0 << r1
    if r1
      if (match_len = has_terminal?('UNIQUE INDEX', false, index))
        r3 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('\'UNIQUE INDEX\'')
        r3 = nil
      end
      s0 << r3
      if r3
        s4, i4 = [], index
        loop do
          r5 = _nt_space
          if r5
            s4 << r5
          else
            break
          end
        end
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        s0 << r4
        if r4
          r6 = _nt_bq
          s0 << r6
          if r6
            r7 = _nt_word
            s0 << r7
            if r7
              r8 = _nt_bq
              s0 << r8
              if r8
                s9, i9 = [], index
                loop do
                  r10 = _nt_space
                  if r10
                    s9 << r10
                  else
                    break
                  end
                end
                r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
                s0 << r9
                if r9
                  if (match_len = has_terminal?('(', false, index))
                    r11 = true
                    @index += match_len
                  else
                    terminal_parse_failure('\'(\'')
                    r11 = nil
                  end
                  s0 << r11
                  if r11
                    r12 = _nt_bq
                    s0 << r12
                    if r12
                      r13 = _nt_word
                      s0 << r13
                      if r13
                        r14 = _nt_bq
                        s0 << r14
                        if r14
                          s15, i15 = [], index
                          loop do
                            r16 = _nt_space
                            if r16
                              s15 << r16
                            else
                              break
                            end
                          end
                          r15 = instantiate_node(SyntaxNode,input, i15...index, s15)
                          s0 << r15
                          if r15
                            if (match_len = has_terminal?('ASC', false, index))
                              r17 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                              @index += match_len
                            else
                              terminal_parse_failure('\'ASC\'')
                              r17 = nil
                            end
                            s0 << r17
                            if r17
                              if (match_len = has_terminal?(')', false, index))
                                r18 = true
                                @index += match_len
                              else
                                terminal_parse_failure('\')\'')
                                r18 = nil
                              end
                              s0 << r18
                              if r18
                                s19, i19 = [], index
                                loop do
                                  r20 = _nt_space
                                  if r20
                                    s19 << r20
                                  else
                                    break
                                  end
                                end
                                r19 = instantiate_node(SyntaxNode,input, i19...index, s19)
                                s0 << r19
                                if r19
                                  if (match_len = has_terminal?(',', false, index))
                                    r22 = true
                                    @index += match_len
                                  else
                                    terminal_parse_failure('\',\'')
                                    r22 = nil
                                  end
                                  if r22
                                    r21 = r22
                                  else
                                    r21 = instantiate_node(SyntaxNode,input, index...index)
                                  end
                                  s0 << r21
                                  if r21
                                    if (match_len = has_terminal?("\n", false, index))
                                      r24 = true
                                      @index += match_len
                                    else
                                      terminal_parse_failure('"\\n"')
                                      r24 = nil
                                    end
                                    if r24
                                      r23 = r24
                                    else
                                      r23 = instantiate_node(SyntaxNode,input, index...index)
                                    end
                                    s0 << r23
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(UniqIndex0)
      r0.extend(UniqIndex1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:uniq_index][start_index] = r0

    r0
  end

  module Comment0
  end

  def _nt_comment
    start_index = index
    if node_cache[:comment].has_key?(index)
      cached = node_cache[:comment][index]
      if cached
        node_cache[:comment][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_space
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      if (match_len = has_terminal?('--', false, index))
        r3 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('\'--\'')
        r3 = nil
      end
      s0 << r3
      if r3
        s4, i4 = [], index
        loop do
          i5 = index
          r6 = _nt_space
          if r6
            r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
            r5 = r6
          else
            r7 = _nt_word
            if r7
              r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
              r5 = r7
            else
              if has_terminal?(@regexps[gr = '\A[.\'`"()\\[\\]]'] ||= Regexp.new(gr), :regexp, index)
                r8 = true
                @index += 1
              else
                terminal_parse_failure('[.\'`"()\\[\\]]')
                r8 = nil
              end
              if r8
                r8 = SyntaxNode.new(input, (index-1)...index) if r8 == true
                r5 = r8
              else
                @index = i5
                r5 = nil
              end
            end
          end
          if r5
            s4 << r5
          else
            break
          end
        end
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        s0 << r4
        if r4
          if (match_len = has_terminal?("\n", false, index))
            r9 = true
            @index += match_len
          else
            terminal_parse_failure('"\\n"')
            r9 = nil
          end
          s0 << r9
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Comment0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:comment][start_index] = r0

    r0
  end

  module SetStatement0
  end

  def _nt_set_statement
    start_index = index
    if node_cache[:set_statement].has_key?(index)
      cached = node_cache[:set_statement][index]
      if cached
        node_cache[:set_statement][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_space
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      if (match_len = has_terminal?('SET', false, index))
        r3 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('\'SET\'')
        r3 = nil
      end
      s0 << r3
      if r3
        s4, i4 = [], index
        loop do
          i5 = index
          r6 = _nt_space
          if r6
            r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
            r5 = r6
          else
            r7 = _nt_word
            if r7
              r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
              r5 = r7
            else
              if (match_len = has_terminal?("'", false, index))
                r8 = true
                @index += match_len
              else
                terminal_parse_failure('"\'"')
                r8 = nil
              end
              if r8
                r8 = SyntaxNode.new(input, (index-1)...index) if r8 == true
                r5 = r8
              else
                @index = i5
                r5 = nil
              end
            end
          end
          if r5
            s4 << r5
          else
            break
          end
        end
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        s0 << r4
        if r4
          if (match_len = has_terminal?(";\n", false, index))
            r9 = instantiate_node(SyntaxNode,input, index...(index + match_len))
            @index += match_len
          else
            terminal_parse_failure('";\\n"')
            r9 = nil
          end
          s0 << r9
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(SetStatement0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:set_statement][start_index] = r0

    r0
  end

  module UseStatement0
  end

  def _nt_use_statement
    start_index = index
    if node_cache[:use_statement].has_key?(index)
      cached = node_cache[:use_statement][index]
      if cached
        node_cache[:use_statement][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_space
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      if (match_len = has_terminal?('USE', false, index))
        r3 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('\'USE\'')
        r3 = nil
      end
      s0 << r3
      if r3
        s4, i4 = [], index
        loop do
          i5 = index
          r6 = _nt_space
          if r6
            r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
            r5 = r6
          else
            r7 = _nt_word
            if r7
              r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
              r5 = r7
            else
              r8 = _nt_bq
              if r8
                r8 = SyntaxNode.new(input, (index-1)...index) if r8 == true
                r5 = r8
              else
                @index = i5
                r5 = nil
              end
            end
          end
          if r5
            s4 << r5
          else
            break
          end
        end
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        s0 << r4
        if r4
          if (match_len = has_terminal?(";\n", false, index))
            r9 = instantiate_node(SyntaxNode,input, index...(index + match_len))
            @index += match_len
          else
            terminal_parse_failure('";\\n"')
            r9 = nil
          end
          s0 << r9
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(UseStatement0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:use_statement][start_index] = r0

    r0
  end

  module EngineStatement0
  end

  def _nt_engine_statement
    start_index = index
    if node_cache[:engine_statement].has_key?(index)
      cached = node_cache[:engine_statement][index]
      if cached
        node_cache[:engine_statement][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_space
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      if (match_len = has_terminal?('ENGINE', false, index))
        r3 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('\'ENGINE\'')
        r3 = nil
      end
      s0 << r3
      if r3
        s4, i4 = [], index
        loop do
          i5 = index
          r6 = _nt_space
          if r6
            r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
            r5 = r6
          else
            r7 = _nt_word
            if r7
              r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
              r5 = r7
            else
              @index = i5
              r5 = nil
            end
          end
          if r5
            s4 << r5
          else
            break
          end
        end
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        s0 << r4
        if r4
          if (match_len = has_terminal?(";\n", false, index))
            r8 = instantiate_node(SyntaxNode,input, index...(index + match_len))
            @index += match_len
          else
            terminal_parse_failure('";\\n"')
            r8 = nil
          end
          s0 << r8
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(EngineStatement0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:engine_statement][start_index] = r0

    r0
  end

  module CreateSchema0
  end

  def _nt_create_schema
    start_index = index
    if node_cache[:create_schema].has_key?(index)
      cached = node_cache[:create_schema][index]
      if cached
        node_cache[:create_schema][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_space
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      if (match_len = has_terminal?('CREATE SCHEMA', false, index))
        r3 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('\'CREATE SCHEMA\'')
        r3 = nil
      end
      s0 << r3
      if r3
        s4, i4 = [], index
        loop do
          i5 = index
          r6 = _nt_space
          if r6
            r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
            r5 = r6
          else
            r7 = _nt_word
            if r7
              r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
              r5 = r7
            else
              r8 = _nt_bq
              if r8
                r8 = SyntaxNode.new(input, (index-1)...index) if r8 == true
                r5 = r8
              else
                @index = i5
                r5 = nil
              end
            end
          end
          if r5
            s4 << r5
          else
            break
          end
        end
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        s0 << r4
        if r4
          if (match_len = has_terminal?(";\n", false, index))
            r9 = instantiate_node(SyntaxNode,input, index...(index + match_len))
            @index += match_len
          else
            terminal_parse_failure('";\\n"')
            r9 = nil
          end
          s0 << r9
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(CreateSchema0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:create_schema][start_index] = r0

    r0
  end

  def _nt_bq
    start_index = index
    if node_cache[:bq].has_key?(index)
      cached = node_cache[:bq][index]
      if cached
        node_cache[:bq][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if (match_len = has_terminal?('`', false, index))
      r0 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('\'`\'')
      r0 = nil
    end

    node_cache[:bq][start_index] = r0

    r0
  end

  def _nt_space
    start_index = index
    if node_cache[:space].has_key?(index)
      cached = node_cache[:space][index]
      if cached
        node_cache[:space][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?(@regexps[gr = '\A[ \\t\\r]'] ||= Regexp.new(gr), :regexp, index)
        r1 = true
        @index += 1
      else
        terminal_parse_failure('[ \\t\\r]')
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:space][start_index] = r0

    r0
  end

  def _nt_word
    start_index = index
    if node_cache[:word].has_key?(index)
      cached = node_cache[:word][index]
      if cached
        node_cache[:word][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?(@regexps[gr = '\A[a-zA-Z0-9:.,@=_-]'] ||= Regexp.new(gr), :regexp, index)
        r1 = true
        @index += 1
      else
        terminal_parse_failure('[a-zA-Z0-9:.,@=_-]')
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:word][start_index] = r0

    r0
  end

end

class DDLParser < Treetop::Runtime::CompiledParser
  include DDL
end

